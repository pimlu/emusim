#include <QApplication>
#include <iostream>

#include "sim/system.h"
#include "gui/mainwindow.h"
#include "gui/systemthread.h"

#include "sim/syscalls.h"
#include "emu/emuprocess.h"
#include "sim/process.h"

#include "sim/filesystem.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);

    //sim::Process *p = new sim::DummyProcess(200);
    sim::System *mainSystem = new sim::System(65536, 200, std::cin, std::cout, "data");


    gui::SystemThread *mainThread = new gui::SystemThread(mainSystem, 10000);
    //mainThread->add(p, "dummy");

    gui::MainWindow mainWindow;
    mainWindow.mainThread = mainThread;
    mainWindow.show();

    // Temporary until we have File IO added
    char *memory = new char[0x10000];

    // Fibonaci Calcutator, calculates n = 20 and stores it in register A
    // https://gist.github.com/ehaliewicz/2523345
    unsigned char program[] =
    {
        0x00, 0x7d, 0x05, 0x00, 0xe1, 0x00, 0xc1, 0x84,
        0xc2, 0x88, 0xd4, 0x1c, 0x81, 0x7f, 0x20, 0x00,
        0x01, 0x84, 0x21, 0x88, 0x41, 0x18, 0x52, 0x84,
        0x81, 0x7f, 0x15, 0x00, 0x61, 0x00, 0x62, 0x04,
        0x01, 0x04, 0x21, 0x0c, 0x43, 0x88, 0x81, 0x7f,
        0x0b, 0x00, 0x00, 0x7d, 0x04, 0x00, 0xc1, 0xaf,
        0x00, 0x10, 0x01, 0x7c, 0x00, 0x10, 0x21, 0x88,
        0x00, 0x7d, 0x02, 0x00, 0x81, 0x7f, 0x04, 0x00,
        0x00, 0x7d, 0x01, 0x00
    };
    //bool foo = mainSystem->fs.writeFile("fib",0,sizeof program,(char*) program);
    //std::cout << (foo?"yay":"nay") << std::endl;
    // Hello World, prints "Hello, world!" to the screen
    /*unsigned char program[] =
    {
        0xc1, 0x7f, 0x48, 0x00, 0x00, 0x10, 0xc1, 0x7f,
        0x65, 0x00, 0x01, 0x10, 0xc1, 0x7f, 0x6c, 0x00,
        0x02, 0x10, 0xc1, 0x7f, 0x6c, 0x00, 0x03, 0x10,
        0xc1, 0x7f, 0x6f, 0x00, 0x04, 0x10, 0xc1, 0x7f,
        0x2c, 0x00, 0x05, 0x10, 0xc1, 0x7f, 0x20, 0x00,
        0x06, 0x10, 0xc1, 0x7f, 0x77, 0x00, 0x07, 0x10,
        0xc1, 0x7f, 0x6f, 0x00, 0x08, 0x10, 0xc1, 0x7f,
        0x72, 0x00, 0x09, 0x10, 0xc1, 0x7f, 0x6c, 0x00,
        0x0a, 0x10, 0xc1, 0x7f, 0x64, 0x00, 0x0b, 0x10,
        0xc1, 0x7f, 0x21, 0x00, 0x0c, 0x10, 0xc1, 0xaf,
        0x0d, 0x10, 0x01, 0x7c, 0x00, 0x10, 0x21, 0xbc,
        0x00, 0x7d, 0x02, 0x00, 0x81, 0x7f, 0x2e, 0x00
    };*/

    // Copy program into processes memory
    memcpy(memory, program, sizeof(program));

    // Create process and schedule it
    emu::EmuProcess *emu = new emu::EmuProcess((char*) memory, 0x2000);
    //mainThread->add(emu, "emu");
    // ---

    /*sim::FileSystem fs("foo");
    fs.writeFile("bar.txt", 3, 4, (char*) "1234");
    //std::cout.write(str, 4);
    //delete[] str;
    std::cout << std::endl;*/

    int ret = a.exec();
    delete mainThread;
    delete mainSystem;
    return ret;
}
